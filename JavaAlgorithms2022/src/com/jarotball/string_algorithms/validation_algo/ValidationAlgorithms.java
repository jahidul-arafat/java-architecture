
/*
 * Copyright (c) 2022.
 * Jahidul Arafat
 * jahidul.arafat@oracle.com
 *
 * All rights reserved.
 */

package com.jarotball.string_algorithms.validation_algo;

import com.jarotball.string_algorithms.developer_tools.DeveloperTools;

import java.util.Scanner;

public class ValidationAlgorithms {
    public static void main(String[] args) {
        // get the user input
        String demoString = DeveloperTools.getString("Enter a String: ");

        // case selector
        showMeTheMenu();
        var choice = DeveloperTools.getString("Enter your choice: ");
        stringValidationChecker(demoString, choice);


    }

    private static void showMeTheMenu() {
        System.out.println("Choice List\n(a)Upper <upper>\n(b)Lower <lower>\n(c)Letter <letter>\n(d)Digit <digit>\n(e)Password <pass>");
    }

    private static void stringValidationChecker(String demoString, String choice) {

        switch (choice) {
            case "upper":
                // check if all the characters of a string is in uppercase
                var isAllUpperCases = checkStringAllUpperCases(demoString);
                System.out.println(String.format("Check<isUpperCase> of <%s>: %s", demoString, isAllUpperCases));
                break;
            case "lower":
                // check if all the characters of a string is in lowercase
                var isAllLowerCases = checkStringAllLowerCases(demoString);
                System.out.println(String.format("Check<isLowerCase> of <%s>: %s", demoString, isAllLowerCases));
                break;
            case "letter":
                // check if all characters of a string is Letter[a-zA-Z], not number or anything else
                var isAllLetters = checkStringAllLetters(demoString);
                System.out.println(String.format("Check<isAllLetter> of <%s>: %s", demoString, isAllLetters));
                break;
            case "digit":
                // check if all characters of a string is Digit [0-9]
                var isAllDigits = checkStringAllDigits(demoString);
                System.out.println(String.format("Check<isAllDigits> of <%s>: %s", demoString, isAllDigits));
                break;
            case "pass":
                // at lease 1 number, 1 uppercase letter and 1 lowercase letter
                // myPaSS0rd
                // use anyMatch() of the character streams (generated by the String)
                var isPasswordComplex = checkIsPasswordComplex(demoString);
                System.out.println(String.format("Check<isPasswordComplex> of <%s>: %s", demoString, isPasswordComplex));
                break;
            default:
                System.out.println("Wrong option chooses");
        }
    }

    public static boolean checkIsPasswordComplex(String demoString) {
        // using method reference
        //
        var isPasswordComplex = demoString.chars().anyMatch(Character::isDigit) &&
                demoString.chars().anyMatch(Character::isUpperCase) &&
                demoString.chars().anyMatch(Character::isLowerCase);


        // what if we try some Lambda instead of method reference;
        // myPaSsw0rd --> this method will return false; expected <true>
        // this is rather ambiguous, you are iterating every single character and expecting it to be upperCase, lowerCase and digit at the same time; thats insane
        // its not even iterating the every character of the string, instead a single character
//        var isPasswordComplex = demoString.chars().anyMatch(c ->
//                Character.isLowerCase(c) && Character.isLetter(c));
        return isPasswordComplex;


    }

    public static boolean checkStringAllDigits(String demoString) {
        var isAllDigits = demoString.chars().allMatch(Character::isDigit);
        return isAllDigits;
    }

    public static boolean checkStringAllLetters(String demoString) {
        boolean isAllLetter = demoString.chars().allMatch(Character::isLetter);
        return isAllLetter;
    }

    public static boolean checkStringAllLowerCases(String demoString) {
        var isLowerCase = demoString.chars().allMatch(Character::isLowerCase);
        // var isLowerCase = demoString.chars().noneMatch(Character::isUpperCase); // alternative solution
        return isLowerCase;
    }

    public static boolean checkStringAllUpperCases(String demoString) {
        /**
         * allMatch() is a short circuit terminal operation, can't be directly applied on string
         * allMatch(for all x P(x)) universal quantification, where x is a stream; here in my case x is the character stream
         * demoString.chars() returns a stream of character, not an array of character
         * if you are interested to get the array of characters of a given string, try "demoString".toCharArray()
         * :: is used to refer to a method of an existing class; is <class>Characte::<method>isUpperCase
         * */
        var isUpperCase = demoString.chars().allMatch(Character::isUpperCase);

        // Bad Coding 01:
        // Problem Statement: Wrapping a shortcut terminal already returning boolean into if-else with explicit boolean return
        // hence demoString.chars().allMatch(Character::isUpperCase) itself is boolean, no further need to explicitly return true or false
//        if (demoString.chars().allMatch(Character::isUpperCase)){
//            return true;
//        } else{
//            return false;
//        }
        // ------------------------------------------------
        return isUpperCase;


    }


}
