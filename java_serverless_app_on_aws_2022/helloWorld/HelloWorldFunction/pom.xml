<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>helloworld</groupId>
    <artifactId>HelloWorld</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>
    <name>A sample Hello World created for SAM CLI.</name>
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <!-- Add X-ray SDK submodule to have more granular control on the trace data
    By Default your application doesn't require x-ray sdk in the pom.xml.
    X-RAY daemon collects the following trace data for you:
        (a) HTTP calls
        (b) AWS resource downstream calls
        (c) SQL Connection
    But if you have any other customized info that you want to send to the X-RAY Daemon, then you need to have the
    X-RAY SDK with Specific submodule in your project's POM.XML page. I am going to use following submodules under dependencyManagement:
        (a) aws-xray-recorder-sdk-bom – Provides a bill of materials that you can use to specify the version to use for all submodules.
        (b) aws-xray-recorder-sdk-core (required) – Basic functionality for creating segments and transmitting segments. Includes AWSXRayServletFilter for instrumenting incoming requests.
    -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.amazonaws</groupId>
                <artifactId>aws-xray-recorder-sdk-bom</artifactId>
                <version>2.11.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
          <groupId>com.amazonaws</groupId>
          <artifactId>aws-lambda-java-events</artifactId>
          <version>3.11.0</version>
        </dependency>
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.13.2</version>
          <scope>test</scope>
        </dependency>

        <!-- Some log4j dependency added| manually-->
        <!-- aws-lambda-java-log4j2 is required to append RequestID to our log-->
        <!-- https://docs.aws.amazon.com/lambda/latest/dg/java-package.html -->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-log4j2</artifactId>
            <version>1.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.19.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.19.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j18-impl</artifactId>
            <version>2.18.0</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>

        <!-- aws x-ray integration | submodule added | Required/Not-optional-->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-xray-recorder-sdk-core</artifactId>
        </dependency>

    </dependencies>

    <build>
      <plugins>
          <!--Previous Plugin has been replaced, as I have used aws-lambda-java-log42j library in my dependency to append the RequestID in my log
          - For this I have to configure a transformer for the Maven Shade plugin.
          - The transformer library combines versions of a cache file that append in both the appender library and in log4j.
          URL: https://docs.aws.amazon.com/lambda/latest/dg/java-package.html
           -->
          <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-shade-plugin</artifactId>
              <version>3.2.2</version>
              <configuration>
                  <createDependencyReducedPom>false</createDependencyReducedPom>
              </configuration>
              <executions>
                  <execution>
                      <phase>package</phase>
                      <goals>
                          <goal>shade</goal>
                      </goals>
                      <configuration>
                          <transformers>
                              <transformer implementation="com.github.edwgiz.maven_shade_plugin.log4j2_cache_transformer.PluginsCacheFileTransformer">
                              </transformer>
                          </transformers>
                      </configuration>
                  </execution>
              </executions>
              <dependencies>
                  <dependency>
                      <groupId>com.github.edwgiz</groupId>
                      <artifactId>maven-shade-plugin.log4j2-cachefile-transformer</artifactId>
                      <version>2.13.0</version>
                  </dependency>
              </dependencies>
          </plugin>
      </plugins>
    </build>
</project>
